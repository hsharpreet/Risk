/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.risk.gui;

import game.risk.gui.PlayerPanel.CurrentGameStatics;
import game.risk.model.Territory;
import game.risk.util.MapReader;
import game.risk.util.RiskMap;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.*;

public class RiskGame extends javax.swing.JFrame
{

    File mapFile;
    RiskMap mapDetails;
    int totalArmies[] =
    {
        40,35,30,25,20
    };
    PlayerPanel pp[];
    Color cl[] = new Color[6];

    public RiskGame()
    {
        initComponents();
        setSize(1000, 600);
        cl[0] = new Color(244, 198, 196);
        cl[1] = new Color(245, 220, 167);
        cl[2] = new Color(168, 244, 182);
        cl[3] = new Color(222, 171, 241);
        cl[4] = new Color(187, 208, 225);
        cl[5] = new Color(210, 194, 130);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        tfMapFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btBrowse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbPlayerCount = new javax.swing.JComboBox<>();
        btLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jpPlayground = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Risk Game");
        setSize(new java.awt.Dimension(1000, 700));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tfMapFile.setFocusable(false);

        jLabel2.setText("Select Map File");

        btBrowse.setText("...");
        btBrowse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btBrowseActionPerformed(evt);
            }
        });

        jLabel1.setText("Players count");

        cbPlayerCount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5","6" }));

        btLoad.setText("Load");
        btLoad.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(tfMapFile, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cbPlayerCount, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(312, 312, 312))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfMapFile, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbPlayerCount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 10, 960, 60);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jpPlayground.setBackground(new java.awt.Color(204, 204, 204));
        jpPlayground.setPreferredSize(new java.awt.Dimension(1000, 100));
        jpPlayground.setLayout(new javax.swing.BoxLayout(jpPlayground, javax.swing.BoxLayout.X_AXIS));
        jScrollPane1.setViewportView(jpPlayground);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 960, 420);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btBrowseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btBrowseActionPerformed
    {//GEN-HEADEREND:event_btBrowseActionPerformed
        JFileChooser ch = new JFileChooser();
        int ans = ch.showOpenDialog(this);
        if (ans == JFileChooser.APPROVE_OPTION)
        {
            mapFile = ch.getSelectedFile();
            tfMapFile.setText(mapFile.getName());
            tfMapFile.setToolTipText(mapFile.getPath());
        }
    }//GEN-LAST:event_btBrowseActionPerformed

    private void btLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btLoadActionPerformed
    {//GEN-HEADEREND:event_btLoadActionPerformed
        if (mapFile != null)
        {
            mapDetails = MapReader.readMapFile(mapFile.getPath());
            if (mapDetails != null)
            {
                int playerCount = Integer.parseInt((String) cbPlayerCount.getSelectedItem());
                pp = new PlayerPanel[playerCount];
                jpPlayground.removeAll();
                jpPlayground.setPreferredSize(new Dimension(370 * playerCount, 400));
                for (int i = 0; i < playerCount; i++)
                {
                    pp[i] = new PlayerPanel();
                    pp[i].setBackground(cl[i]);
                    pp[i].lbPlayer.setText("Player : " + (i + 1));
                    pp[i].infantriesTotal = totalArmies[playerCount - 2];
                    pp[i].lbTotalArmies.setText("Total Infantry : " + totalArmies[playerCount - 2]);
                    jpPlayground.add(pp[i]);
                }

                HashMap<String, Territory> territories = mapDetails.getTerritories();
                Iterator it = territories.keySet().iterator();
                while (it.hasNext())
                {
                    try
                    {
                        for (int i = 0; i < playerCount; i++)
                        {
                            Territory t = territories.get(it.next());
                            CurrentGameStatics cgs = pp[i].new CurrentGameStatics(1, t);
                            pp[i].list.add(cgs);

                        }
                    } catch (Exception ex)
                    {
                        System.out.println("Exception");
                        break;
                    }
                }
                for (int i = 0; i < playerCount; i++)
                {
                    pp[i].infantriesAvailable = (totalArmies[playerCount - 2]) - (pp[i].list.size());
                    pp[i].lbAvailableArmies.setText("Available Infantries : " + pp[i].infantriesAvailable);
                    pp[i].tm.fireTableDataChanged();

                    pp[i].btPlaceInfantry.addActionListener(new PlaceInfantryClickListener(i));
                    pp[i].btFortification.addActionListener(new FortificationClickListener(i));
                    pp[i].btOk.addActionListener(new OkClickListener(i));
                    pp[i].btPlaceInfantry.setEnabled(false);
                    pp[i].btReinforcement.setEnabled(false);
                    pp[i].btFortification.setEnabled(false);
                    pp[i].btOk.setEnabled(false);

                }
                pp[0].btPlaceInfantry.setEnabled(true);

                this.setSize(this.getWidth() + 1, this.getHeight() + 1);
                this.setSize(this.getWidth() - 1, this.getHeight() - 1);

            } else
            {
                JOptionPane.showMessageDialog(this, "Map File could not read. Try again !");
            }
        } else
        {
            JOptionPane.showMessageDialog(this, "Map File could not read. Try again !");
        }
    }//GEN-LAST:event_btLoadActionPerformed

    public class PlaceInfantryClickListener implements ActionListener
    {

        int i;

        public PlaceInfantryClickListener(int i)
        {
            this.i = i;
        }

        public void actionPerformed(ActionEvent e)
        {
            if (pp[i].infantriesAvailable > 0)
            {
                int index = pp[i].jtCountriesAndArmies.getSelectedRow();
                if (index == -1)
                {
                    JOptionPane.showMessageDialog(pp[i], "Select terriotary first");
                } else
                {
                    pp[i].list.get(index).infantries++;
                    pp[i].infantriesAvailable--;
                    pp[i].lbAvailableArmies.setText("Available Infantries : " + pp[i].infantriesAvailable);
                    pp[i].tm.fireTableDataChanged();
                    pp[i].btPlaceInfantry.setEnabled(false);
                    nextIndexToEnableButton(i);

                }
            } else
            {
                JOptionPane.showMessageDialog(pp[i], "No army available");

            }
        }
    }

    void nextIndexToEnableButton(int i)
    {
        boolean flag = true;
        for (int j = 0; j < pp.length; j++)
        {
            if (pp[j].infantriesAvailable > 0)
            {
                flag = false;
                break;
            }
        }
        if (flag)
        {
            JOptionPane.showMessageDialog(RiskGame.this, "Startup Phase Done.\nIn next phase every player has option of reinforcement and fortification.\nDon't forget to press button OK after fortification done !!");
            reinforcement(true);
        } else
        {
            i++;
            if (i == pp.length)
            {
                i = 0;
            }
            if (pp[i].infantriesAvailable > 0)
            {
                pp[i].btPlaceInfantry.setEnabled(true);
            } else
            {
                nextIndexToEnableButton(i);
            }
        }

    }

    public void reinforcement(boolean firstCallToThisFunction)
    {
        for (int i = 0; i < pp.length; i++)
        {
            int n = pp[i].list.size() / 3;
            if (n < 3)
            {
                n = 3;
            }
            //Check if all terrotries are in same continent
            boolean flag = true;
            String firstContinent = pp[i].list.get(0).territory.getContinent();
            for (int j = 1; j < pp[i].list.size(); j++)
            {
                String continent = pp[i].list.get(j).territory.getContinent();
                if (!firstContinent.equals(continent))
                {
                    flag = false;
                    break;
                }
            }
            if (flag)
            {
                int p = Integer.parseInt(mapDetails.getContinents().get(firstContinent));
                n = n + p;
            }
            pp[i].infantriesTotal += n;
            pp[i].lbTotalArmies.setText("Total Infantry : " + pp[i].infantriesTotal);
            pp[i].infantriesAvailable = n;
            pp[i].lbMessage.setText("Message : You have gotton " + n + " new infantries");
            pp[i].lbAvailableArmies.setText("Available Infantries : " + pp[i].infantriesAvailable);
            if (firstCallToThisFunction)
            {
                pp[i].btReinforcement.addActionListener(new ReinforcementClickListener(i));
            }
            pp[i].btReinforcement.setEnabled(false);
            pp[i].btFortification.setEnabled(false);
            pp[i].btOk.setEnabled(false);
        }
        pp[0].btReinforcement.setEnabled(true);
    }

    void nextPlayerTurn(int i)
    {
        pp[i].lbMessage.setText("");
        i++;
        if (i == pp.length)
        {
            reinforcement(false);
        } else
        {
            for (int j = 0; j < pp.length; j++)
            {
                pp[j].btReinforcement.setEnabled(false);
                pp[j].btFortification.setEnabled(false);
                pp[j].btOk.setEnabled(false);
            }
            pp[i].btReinforcement.setEnabled(true);
        }

    }

    public class ReinforcementClickListener implements ActionListener
    {

        int i;

        public ReinforcementClickListener(int i)
        {
            this.i = i;
        }

        public void actionPerformed(ActionEvent e)
        {
            if (pp[i].infantriesAvailable > 0)
            {
                int index = pp[i].jtCountriesAndArmies.getSelectedRow();
                if (index == -1)
                {
                    JOptionPane.showMessageDialog(pp[i], "Select terriotary first");
                } else
                {
                    pp[i].list.get(index).infantries++;
                    pp[i].infantriesAvailable--;
                    pp[i].lbAvailableArmies.setText("Available Infantries : " + pp[i].infantriesAvailable);
                    pp[i].tm.fireTableDataChanged();

                    if (pp[i].infantriesAvailable == 0)
                    {
                        pp[i].btReinforcement.setEnabled(false);
                        int ans = JOptionPane.showConfirmDialog(pp[i], "Player : " + (i + 1) + "\nDo you want to do fortification ?", "Fortification Confirmition", JOptionPane.YES_NO_OPTION);
                        if (ans == JOptionPane.YES_OPTION)
                        {
                            pp[i].btFortification.setEnabled(true);
                            pp[i].btOk.setEnabled(true);
                        } else
                        {
                            nextPlayerTurn(i);
                        }
                    }

                }
            } else
            {
                JOptionPane.showMessageDialog(pp[i], "No army available");

            }
        }
    }

    public class FortificationClickListener implements ActionListener
    {

        int i;

        public FortificationClickListener(int i)
        {
            this.i = i;
        }

        public void actionPerformed(ActionEvent e)
        {
            int tableIndex = pp[i].jtCountriesAndArmies.getSelectedRow();
            int listIndex = pp[i].lsNeighbour.getSelectedIndex();
            if (tableIndex == -1)
            {
                JOptionPane.showMessageDialog(pp[i], "Select source territory first");
            } else if (listIndex == -1)
            {
                JOptionPane.showMessageDialog(pp[i], "Select destination territory first");
            } else
            {
                String destinationTerritory = pp[i].lsNeighbour.getSelectedValue();
                boolean isDestinationMyOwnCountry = false;
                for (int j = 0; j < pp[i].list.size(); j++)
                {
                    if (pp[i].list.get(j).territory.getName().equals(destinationTerritory))
                    {
                        isDestinationMyOwnCountry = true;
                        break;
                    }
                }
                if (isDestinationMyOwnCountry)
                {
                    if (pp[i].list.get(tableIndex).infantries > 1)
                    {

                        pp[i].list.get(tableIndex).infantries--;

                        for (int j = 0; j < pp[i].list.size(); j++)
                        {
                            if (pp[i].list.get(j).territory.getName().equals(destinationTerritory))
                            {
                                pp[i].list.get(j).infantries++;
                                pp[i].tm.fireTableDataChanged();
                                break;
                            }
                        }
                    } else
                    {
                        JOptionPane.showMessageDialog(pp[i], "Source territory must have more that 1 infantries for fortification");
                    }
                } else
                {
                    JOptionPane.showMessageDialog(pp[i], "Destination territory must be your territory");
                }
            }
        }
    }

    public class OkClickListener implements ActionListener
    {

        int i;

        public OkClickListener(int i)
        {
            this.i = i;
        }

        public void actionPerformed(ActionEvent e)
        {

            nextPlayerTurn(i);
        }
    }

    public void fortification(int i)
    {
        System.out.println("Fortification Called : " + i);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RiskGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RiskGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RiskGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RiskGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RiskGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBrowse;
    private javax.swing.JButton btLoad;
    private javax.swing.JComboBox<String> cbPlayerCount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpPlayground;
    private javax.swing.JTextField tfMapFile;
    // End of variables declaration//GEN-END:variables
}
